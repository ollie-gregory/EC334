---
title: "Problem Set 6"
author: "Oliver Gregory"
format:
    revealjs:
        fontsize: 30px
        theme: moon
---
```{python}
import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
data = pd.read_csv('data/Romer_Romer.csv')

data['Date'] = pd.to_datetime(data['Date'], unit='D', origin='1900-01-01')
```

## Romer and Romer (2004) Monetary Policy Shocks

The function we will estimate is given by:

$$
y_{t+h} - y_{t-1} = \alpha_h + \beta_h \text{Romer Shock}_t + u_t
$$

where $y$ is either the log of industrial production (IP) or the log of the consumer price index (CPI).

In Romer and Romer (2004), the authors estimate a slightly different equation:

$$
\Delta y_t = \alpha_0 + \sum_{k=1}^{11} \alpha_k D_{kt} + \sum_{i=1}^{24} b_i \Delta y_{t-i} + \sum_{j=1}^{36} c_j S_{t-j} + e_t
$$

This regresses the change in output on a set of monthly dummy variables, lags of the dependent variable, and lags of the shock variable.

This is a potential reason why their results are different from ours.

```{python}
h_range = np.arange(-10, 41)
results = []
for h in h_range:
    df = pd.DataFrame()
    df['target_IP'] = data['ln(IP)'].shift(-h) - data['ln(IP)'].shift(1)
    df['target_CPI'] = data['Log(CPI)'].shift(-h) - data['Log(CPI)'].shift(1)
    df['shock'] = data['R&R Shock']
    df = df.dropna()
    model_IP = sm.OLS(df['target_IP'], sm.add_constant(df['shock'])).fit()
    model_CPI = sm.OLS(df['target_CPI'], sm.add_constant(df['shock'])).fit()
    
    # Store coefficients and standard errors for confidence intervals
    results.append([
        h, 
        model_IP.params['shock'],                           # IP coefficient
        model_IP.params['shock'] - 1.96 * model_IP.bse['shock'],  # Lower CI for IP
        model_IP.params['shock'] + 1.96 * model_IP.bse['shock'],  # Upper CI for IP
        model_CPI.params['shock'],                          # CPI coefficient
        model_CPI.params['shock'] - 1.96 * model_CPI.bse['shock'], # Lower CI for CPI
        model_CPI.params['shock'] + 1.96 * model_CPI.bse['shock']  # Upper CI for CPI
    ])

results = pd.DataFrame(results, columns=['h', 'IP', 'IP_lower', 'IP_upper', 'CPI', 'CPI_lower', 'CPI_upper'])
```

## Horizon analysis

```{python}
# Moon theme color palette
moon_heading = '#EEE8D5'
moon_blue = '#012B36'  # Deep blue
moon_accent = '#2082C3'  # Lighter blue accent
moon_text = '#94A0A1'  # Grey
moon_green = "darkturquoise"
moon_ci_color = "lightgrey"  # For the confidence interval

fig, ax = plt.subplots(1, 2, figsize=(11, 4.5), facecolor=moon_blue)
ax[0].set_facecolor(moon_blue)
ax[1].set_facecolor(moon_blue)

# Plot IP with confidence interval
ax[0].plot(results['h'], results['IP'], color=moon_accent)
ax[0].fill_between(results['h'], results['IP_lower'], results['IP_upper'], color=moon_ci_color, alpha=0.3, label='95% CI')
ax[0].set_title('Impulse response of IP to monetary policy shocks', color=moon_text)
ax[0].set_xlabel('h', color=moon_text)
ax[0].set_ylabel('Impulse response', color=moon_text)
ax[0].vlines(0, results['IP_lower'].min(), results['IP_upper'].max(), linestyle='--', color=moon_accent)
ax[0].grid(alpha=0.3)
ax[0].spines[['top','bottom','left','right']].set_color(moon_text)
ax[0].tick_params(colors=moon_text)

# Plot CPI with confidence interval
ax[1].plot(results['h'], results['CPI'], color=moon_accent)
ax[1].fill_between(results['h'], results['CPI_lower'], results['CPI_upper'], color=moon_ci_color, alpha=0.3, label='95% CI')
ax[1].set_title('Impulse response of CPI to monetary policy shocks', color=moon_text)
ax[1].set_xlabel('h', color=moon_text)
ax[1].set_ylabel('Impulse response', color=moon_text)
ax[1].vlines(0, results['CPI_lower'].min(), results['CPI_upper'].max(), linestyle='--', color=moon_accent)
ax[1].grid(alpha=0.3)
ax[1].spines[['top','bottom','left','right']].set_color(moon_text)
ax[1].tick_params(colors=moon_text)

# Add legend to show confidence interval
ax[0].legend(loc='lower right', framealpha=0.7, facecolor=moon_blue, edgecolor=moon_text, labelcolor=moon_text)
ax[1].legend(loc='lower right', framealpha=0.7, facecolor=moon_blue, edgecolor=moon_text, labelcolor=moon_text)

fig.tight_layout()
```

The interpretation for negative $h$ values is the effect of the present Romer shock on past output.